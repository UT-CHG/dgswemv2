#include "utilities/almost_equal.hpp"
#include "basis/bases_1D.hpp"

const std::vector<std::vector<double>> true_vals = {
    {1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00},
    {-1.000000000000000e+00,
     -5.000000000000000e-01,
     0.000000000000000e+00,
     5.000000000000000e-01,
     1.000000000000000e+00},
    {1.000000000000000e+00,
     -1.250000000000000e-01,
     -5.000000000000000e-01,
     -1.250000000000000e-01,
     1.000000000000000e+00},
    {-1.000000000000000e+00,
     4.375000000000000e-01,
     0.000000000000000e+00,
     -4.375000000000000e-01,
     1.000000000000000e+00},
    {1.000000000000000e+00,
     -2.890625000000000e-01,
     3.750000000000000e-01,
     -2.890625000000000e-01,
     1.000000000000000e+00},
    {-1.000000000000000e+00,
     -8.984375000000000e-02,
     0.000000000000000e+00,
     8.984375000000000e-02,
     1.000000000000000e+00},
    {1.000000000000000e+00,
     3.232421875000000e-01,
     -3.125000000000000e-01,
     3.232421875000000e-01,
     1.000000000000000e+00},
    {-1.000000000000000e+00,
     -2.231445312500000e-01,
     0.000000000000000e+00,
     2.231445312500000e-01,
     1.000000000000000e+00},
    {1.000000000000000e+00,
     -7.363891601562500e-02,
     2.734375000000000e-01,
     -7.363891601562500e-02,
     1.000000000000000e+00},
    {-1.000000000000000e+00,
     2.678985595703125e-01,
     0.000000000000000e+00,
     -2.678985595703125e-01,
     1.000000000000000e+00},
    {1.000000000000000e+00,
     -1.882286071777344e-01,
     -2.460937500000000e-01,
     -1.882286071777344e-01,
     1.000000000000000e+00},
    {-1.000000000000000e+00,
     -6.387138366699219e-02,
     0.000000000000000e+00,
     6.387138366699219e-02,
     1.000000000000000e+00}};

const std::vector<std::vector<double>> true_Dvals = {
    {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00},
    {1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00, 1.000000000000000e+00},
    {-3.000000000000000e+00,
     -1.500000000000000e+00,
     0.000000000000000e+00,
     1.500000000000000e+00,
     3.000000000000000e+00},
    {6.000000000000000e+00,
     3.750000000000000e-01,
     -1.500000000000000e+00,
     3.750000000000000e-01,
     6.000000000000000e+00},
    {-1.000000000000000e+01,
     1.562500000000000e+00,
     0.000000000000000e+00,
     -1.562500000000000e+00,
     1.000000000000000e+01},
    {1.500000000000000e+01,
     -2.226562500000000e+00,
     1.875000000000000e+00,
     -2.226562500000000e+00,
     1.500000000000000e+01},
    {-2.100000000000000e+01,
     5.742187500000000e-01,
     0.000000000000000e+00,
     -5.742187500000000e-01,
     2.100000000000000e+01},
    {2.800000000000000e+01,
     1.975585937500000e+00,
     -2.187500000000000e+00,
     1.975585937500000e+00,
     2.800000000000000e+01},
    {-3.600000000000000e+01,
     -2.772949218750000e+00,
     0.000000000000000e+00,
     2.772949218750000e+00,
     3.600000000000000e+01},
    {4.500000000000000e+01, 7.237243652343750e-01, 2.460937500000000e+00, 7.237243652343750e-01, 4.500000000000000e+01},
    {-5.500000000000000e+01,
     2.317123413085938e+00,
     0.000000000000000e+00,
     -2.317123413085938e+00,
     5.500000000000000e+01},
    {6.600000000000000e+01,
     -3.229076385498047e+00,
     -2.707031250000000e+00,
     -3.229076385498047e+00,
     6.600000000000000e+01}};

int main() {
    using Utilities::almost_equal;

    std::vector<Point<1>> points(5);

    points[0][0] = -1.0000000000000000e+00;
    points[1][0] = -5.0000000000000000e-01;
    points[2][0] = 0.0000000000000000e+00;
    points[3][0] = 5.0000000000000000e-01;
    points[4][0] = 1.0000000000000000e+00;

    // auto is_normal_or_zero = [](double a) -> bool { return (std::isnormal(a) || (a == 0)); };

    Basis::Legendre_1D basis;
    bool error_found = false;

    DynMatrix<double> my_evals                 = basis.GetPhi(10, points);
    std::array<DynMatrix<double>, 1> my_Devals = basis.GetDPhi(10, points);

    for (uint dof = 0; dof < 11; ++dof) {
        // Check the evaluations of the Legendre polynomials
        for (uint pt = 0; pt < 5; ++pt) {
            if (!almost_equal(true_vals[dof][pt], my_evals(dof, pt))) {
                std::cerr << "Error dof(" << dof << "): the true value = " << true_vals[dof][pt]
                          << " your computed value  = " << my_evals(dof, pt) << std::endl;

                error_found = true;
            }
        }

        // Check the Gradient evaluations of the Legendre polynomials
        for (int pt = 0; pt < 5; ++pt) {
            if (!almost_equal(true_Dvals[dof][pt], my_Devals[LocalCoordLin::l1](dof, pt), 1000)) {
                std::cerr << "Error in Gradient dof and pt (" << dof << ',' << pt << "): the true value = ("
                          << std::setprecision(14) << true_Dvals[dof][pt] << ") your computed value  = ("
                          << my_Devals[LocalCoordLin::l1](dof, pt) << ")\n";

                error_found = true;
            }
        }
    }

    if (error_found) {
        return 1;
    }
    return 0;
}