set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -Wall -g")

list (APPEND DG_HYPER_SWE_SOURCES
  ${PROJECT_SOURCE_DIR}/source/problem/SWE/swe_inputs.cpp

  ${PROJECT_SOURCE_DIR}/source/preprocessor/mesh_metadata.cpp
  ${PROJECT_SOURCE_DIR}/source/preprocessor/ADCIRC_reader/adcirc_format.cpp

  ${PROJECT_SOURCE_DIR}/source/simulation/stepper.cpp

  ${PROJECT_SOURCE_DIR}/source/basis/polynomials/basis_polynomials.cpp
  ${PROJECT_SOURCE_DIR}/source/basis/bases_2D/basis_dubiner_2D.cpp

  ${PROJECT_SOURCE_DIR}/source/shape/shapes_2D/shape_straighttriangle.cpp

  ${PROJECT_SOURCE_DIR}/source/integration/integrations_2D/integration_dunavant_2D.cpp
  ${PROJECT_SOURCE_DIR}/source/integration/integrations_1D/integration_gausslegendre_1D.cpp
)

add_executable(
  swe_manufactured_solution_serial
  ${PROJECT_SOURCE_DIR}/examples/manufactured_solution/main_swe_manufactured.cpp
  ${DG_HYPER_SWE_SOURCES}
)

target_include_directories(swe_manufactured_solution_serial PRIVATE ${YAML_CPP_INCLUDE_DIR})
target_link_libraries(swe_manufactured_solution_serial ${YAML_CPP_LIBRARIES})

install(TARGETS swe_manufactured_solution_serial DESTINATION bin)

if(USE_CUDA)
  cuda_add_executable(swe_manufactured_solution_cuda
  ${PROJECT_SOURCE_DIR}/examples/manufactured_solution/cuda_main_swe_manufactured.cu
    ${DG_HYPER_SWE_SOURCES}
  )
  target_include_directories(swe_manufactured_solution_cuda PRIVATE ${YAML_CPP_INCLUDE_DIR})
  target_link_libraries(swe_manufactured_solution_cuda ${YAML_CPP_LIBRARIES})

  install(TARGETS swe_manufactured_solution_cuda DESTINATION bin)
endif()

#if(USE_OMPI)
#  add_executable(
#    DG_HYPER_SWE_OMPI
#    ${PROJECT_SOURCE_DIR}/source/problem/SWE/ompi_main_swe.cpp
#    ${DG_HYPER_SWE_SOURCES}
#    ${PROJECT_SOURCE_DIR}/source/communication/ompi_communicator.cpp
#  )

#  target_include_directories(DG_HYPER_SWE_OMPI PRIVATE ${YAML_CPP_INCLUDE_DIR} ${MPI_CXX_INCLUDE_PATH})
#  target_link_libraries(DG_HYPER_SWE_OMPI ${YAML_CPP_LIBRARIES} ${MPI_CXX_LIBRARIES})

#  install(TARGETS DG_HYPER_SWE_OMPI DESTINATION bin)
#endif()

#if(USE_HPX)
#  add_executable(
#    DG_HYPER_SWE_HPX
#    ${PROJECT_SOURCE_DIR}/source/problem/SWE/hpx_main_swe.cpp
#    ${DG_HYPER_SWE_SOURCES}
#    ${PROJECT_SOURCE_DIR}/source/communication/hpx_communicator.cpp
#  )


#  hpx_setup_target(
#    DG_HYPER_SWE_HPX
#    COMPONENT_DEPENDENCIES iostreams
#  )

#  target_include_directories(DG_HYPER_SWE_HPX PRIVATE ${YAML_CPP_INCLUDE_DIR} ${HPX_INCLUDE_DIRS})
#  target_link_libraries(DG_HYPER_SWE_HPX ${YAML_CPP_LIBRARIES} ${HPX_LIBRARIES})

#  install(TARGETS DG_HYPER_SWE_HPX DESTINATION bin)
#endif()

